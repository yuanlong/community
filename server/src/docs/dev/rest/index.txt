[[rest-api]]
REST API
========

include::introduction.txt[]

[[rest-api-service-root]]
== Service root ==

include::get-service-root.txt[]

[[rest-api-nodes]]
== Nodes ==

include::create-node.txt[]

include::create-node-with-properties.txt[]

include::get-node.txt[]

include::get-non-existent-node.txt[]

include::delete-node.txt[]

include::nodes-with-relationships-can-not-be-deleted.txt[]

[[rest-api-relationships]]
== Relationships ==

The general pattern to get relationships is:
[source]
GET http://localhost:7474/db/data/node/123/relationships/{dir}/{-list|&|types}

Where +dir+ is one of +all+, +in+, +out+ and +types+ is an ampersand-separated list of types.
See the examples below for more information.

include::create-relationship.txt[]

include::get-all-relationships.txt[]

include::get-incoming-relationships.txt[]

include::get-outgoing-relationships.txt[]

include::get-typed-relationships.txt[]

include::get-relationships-on-a-node-without-relationships.txt[]

[[rest-api-relationship-types]]
== Relationship types ==

include::get-relationship-types.txt[]

[[rest-api-node-properties]]
== Node properties ==

include::set-property-on-node.txt[]

include::update-node-properties.txt[]

include::get-properties-for-node.txt[]

include::get-properties-for-node-(empty-result).txt[]

include::property-values-can-not-be-null.txt[]

include::property-values-can-not-be-nested.txt[]

include::delete-all-properties-from-node.txt[]

[[rest-api-relationship-properties]]
== Relationship properties ==

include::update-relationship-properties.txt[]

[[rest-api-indexes]]
== Indexes ==

An index can contain either nodes or relationships.

NOTE: To create an index with default configuration, simply start using it by adding nodes/relationships to it. It will then be automatically created for you.

What default configuration means depends on how you have configured your database.
If you haven't changed any indexing configuration, it means the indexes will be using a Lucene-based backend.

All the examples below show you how to do operations on node indexes, but all of them are just as applicable
to relationship indexes. Simple change the "node" part of the URL to "relationship".

If you want to customize the index settings, see <<rest-api-create-node-index-with-configuration>>.

include::create-node-index.txt[]

include::create-node-index-with-configuration.txt[]

include::delete-node-index.txt[]

include::list-node-indexes.txt[]

include::list-node-indexes-(empty-result).txt[]

include::add-node-to-index.txt[]

include::remove-all-entries-with-a-given-node-from-an-index.txt[]

include::remove-all-entries-with-a-given-node-and-key-from-an-index.txt[]

include::remove-all-entries-with-a-given-node,-key-and-value-from-an-index.txt[]

include::find-node-by-exact-match.txt[]

include::find-node-by-query.txt[]

[[rest-api-auto-indexes]]
== Auto-Indexes ==

include::find-node-by-exact-match-from-an-automatic-index.txt[]

include::find-node-by-query-from-an-automatic-index.txt[]

[[rest-api-configurable-auto-indexes]]
== Configurable Auto-Indexing ==

Out of the box auto-indexing supports exact matches since they are created with the default configuration (http://docs.neo4j.org/chunked/snapshot/indexing-create.html) the first time you access them. However it is possible to intervene in the lifecycle of the server before any auto indexes are created to change their configuration.

This approach *cannot* be used on databases that already have auto-indexes established. To change the auto-index configuration existing indexes would have to be deleted first, so be careful!

[CAUTION]
This technique works, but it is not particularly pleasant. Future versions of Neo4j may remove this loophole in favour of a better structured feature for managing auto-indexing configurations.

Auto-indexing must be enabled through configuration before we can create or configure them. Firstly ensure that you've added some config like this into your server's +neo4j.properties+ file:

[source]
----
node_auto_indexing=true
relationship_auto_indexing=true
node_keys_indexable=name,phone
relationship_keys_indexable=since
----

The +node_auto_indexing+ and +relationship_auto_indexing+ turn auto-indexing on for nodes and relationships respectively. The +node_keys_indexable+ key allows you to specify a comma-separated list of node property keys to be indexed. The +relationship_keys_indexable+ does the same for relationship property keys. 

Next start the server as usual by invoking the start script as described in <<server-installation>>.

Next we have to pre-empt the creation of an auto-index, by telling the server to create an apparently manual index which has the same name as the node (or relationship) auto-index. For example, in this case we'll create a node auto index whose name is +node_auto_index+, like so:

include::create-an-auto-index-for-nodes-with-specific-configuration.txt[]

If you require configured auto-indexes for relationships, the approach is similar:

include::create-an-auto-index-for-relationships-with-specific-configuration.txt[]

In case you're curious how this works, on the server side it triggers the creation of an index which happens to have the same name as the auto index that the database would create for itself. Now when we interact with the database, the index thinks the index is already is created so the state machine skips over that step and just gets on with normal day-to-day auto-indexing.

[CAUTION]
You have to do this early in your server lifecycle, before any normal auto indexes are created.

[[rest-api-traverse]]
== Traversals ==

include::traversals.txt[]

include::traversal-using-a-return-filter.txt[]

include::creating-a-paged-traverser.txt[]

include::paging-through-the-results-of-a-paged-traverser.txt[]

include::paged-traverser-page-size.txt[]

include::paged-traverser-timeout.txt[]

[[rest-api-graph-algos]]
== Built-in Graph Algorithms ==

include::graph_algos.txt[]

include::find-all-shortest-paths.txt[]

include::find-one-of-the-shortest-paths-between-nodes.txt[]

include::execute-a-dijkstra-algorithm-with-similar-weights-on-relationships.txt[]

include::execute-a-dijkstra-algorithm-with-weights-on-relationships.txt[]


[[rest-api-batch-ops]]
== Batch operations ==

CAUTION: Batch support is currently _experimental_. Expect this part of the API to change.

include::execute-multiple-operations-in-batch.txt[]

include::refer-to-items-created-earlier-in-the-same-batch-job.txt[]

