<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <parent>
    <groupId>org.neo4j</groupId>
    <artifactId>parent-pom</artifactId>
    <version>23</version>
  </parent>

  <modelVersion>4.0.0</modelVersion>
  <groupId>org.neo4j.app</groupId>
  <artifactId>neo4j-server</artifactId>
  <version>1.5-SNAPSHOT</version>
  <name>Neo4j Server</name>
  <description>Standalone Neo4j server application.</description>
  <url>http://components.neo4j.org/${project.artifactId}/${project.version}</url>

  <packaging>jar</packaging>

  <properties>
    <bundle.namespace>org.neo4j.server</bundle.namespace>
    <short-name>server</short-name>
    <license-text.header>GPL-3-header.txt</license-text.header>
    <neo4j-server.mainClass>org.neo4j.server.Bootstrapper</neo4j-server.mainClass>
    <neo-server.home>target/generated-resources/appassembler/jsw</neo-server.home>
    <neo-server.confdir>target/test-classes/etc/neo-server</neo-server.confdir>
    <felix-fileinstall.version>3.0.2</felix-fileinstall.version>
    <java.io.tmpdir>${project.build.directory}</java.io.tmpdir>

    <!-- Run integration tests against a server that is started elsewhere.
      This is used in ServerIntegrationTestFacade, which currently assumes external 
      servers to be running at http://localhost:7474/ -->
    <testWithExternalServer>false</testWithExternalServer>

    <!-- Override this with something like -DcukeArgs=features/webadmin/console.feature:12 -->
    <cukeArgs>src/features</cukeArgs>

    <webdriver.version>2.0b3</webdriver.version>
    <webdriver.impl.class>org.openqa.selenium.firefox.FirefoxDriver</webdriver.impl.class>
	
  </properties>

  <scm>
    <url>https://github.com/neo4j/community/tree/master/server</url>
  </scm>

  <licenses>
    <license>
      <name>GNU General Public License, Version 3</name>
      <url>http://www.gnu.org/licenses/gpl-3.0-standalone.html</url>
      <comments>The software ("Software") developed and owned by Network Engine for
Objects in Lund AB (referred to in this notice as "Neo Technology") is
licensed under the GNU GENERAL PUBLIC LICENSE Version 3 to all third
parties and that license is included below.

However, if you have executed an End User Software License and Services
Agreement or an OEM Software License and Support Services Agreement, or
another commercial license agreement with Neo Technology or one of its
affiliates (each, a "Commercial Agreement"), the terms of the license in
such Commercial Agreement will supersede the GNU GENERAL PUBLIC LICENSE
Version 3 and you may use the Software solely pursuant to the terms of
the relevant Commercial Agreement.
      </comments>
    </license>
  </licenses>

  <dependencies>
    <dependency>
      <groupId>org.neo4j</groupId>
      <artifactId>neo4j</artifactId>
      <version>1.5-SNAPSHOT</version>
      <type>pom</type>
      <exclusions>
        <exclusion>
          <groupId>org.neo4j</groupId>
          <artifactId>neo4j-index</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>org.neo4j</groupId>
      <artifactId>neo4j-kernel</artifactId>
      <version>1.5-SNAPSHOT</version>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.neo4j</groupId>
      <artifactId>server-api</artifactId>
      <version>1.5-SNAPSHOT</version>
    </dependency>

    <dependency>
      <groupId>org.neo4j</groupId>
      <artifactId>neo4j-cypher</artifactId>
      <version>1.5-SNAPSHOT</version>
    </dependency>

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>1.6.1</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-jdk14</artifactId>
      <version>1.6.1</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>log4j-over-slf4j</artifactId>
      <version>1.6.1</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>jcl-over-slf4j</artifactId>
      <version>1.6.1</version>
    </dependency>

    <dependency>
      <groupId>org.mortbay.jetty</groupId>
      <artifactId>jetty</artifactId>
      <version>6.1.25</version>
    </dependency>

    <dependency>
      <groupId>com.sun.jersey</groupId>
      <artifactId>jersey-server</artifactId>
      <version>1.3</version>
    </dependency>

    <dependency>
      <groupId>commons-configuration</groupId>
      <artifactId>commons-configuration</artifactId>
      <version>1.6</version>
      <type>jar</type>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <artifactId>commons-digester</artifactId>
          <groupId>commons-digester</groupId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- Added directly to avoid version clash in commons-configuration. -->
    <dependency>
      <groupId>commons-digester</groupId>
      <artifactId>commons-digester</artifactId>
      <version>1.8.1</version>
      <type>jar</type>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
    </dependency>

    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-jaxrs</artifactId>
      <version>1.6.1</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-mapper-asl</artifactId>
      <version>1.6.1</version>
    </dependency>

    <dependency>
      <groupId>com.tinkerpop</groupId>
      <artifactId>gremlin</artifactId>
      <version>1.2</version>
      <type>jar</type>
      <exclusions>
        <!-- Sail support not needed --> 
        <exclusion>
          <groupId>com.tinkerpop.blueprints</groupId>
          <artifactId>blueprints-sail-graph</artifactId>
        </exclusion>
        <!-- Maven support in groovy not needed -->
        <exclusion>
          <groupId>org.codehaus.groovy.maven</groupId>
          <artifactId>gmaven-plugin</artifactId>
        </exclusion>
        <!-- "readline" not needed - we only expose gremlin through webadmin -->
        <exclusion>
          <groupId>jline</groupId>
          <artifactId>jline</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.tinkerpop.blueprints</groupId>
      <artifactId>blueprints-neo4j-graph</artifactId>
      <version>0.8</version>
      <exclusions>
        <exclusion>
          <groupId>org.neo4j</groupId>
          <artifactId>neo4j</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-all</artifactId>
    </dependency>

    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-all</artifactId>
      <version>1.8.5</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.sun.jersey</groupId>
      <artifactId>jersey-client</artifactId>
      <version>1.3</version>
      <scope>test</scope>
    </dependency>

    <!-- dependency> <groupId>org.rrd4j</groupId> <artifactId>rrd4j</artifactId> <version>2.0.6</version> 
      </dependency -->

    <dependency>
      <groupId>de.huxhorn.lilith</groupId>
      <artifactId>de.huxhorn.lilith.3rdparty.rrd4j</artifactId>
      <version>2.0.5</version>
    </dependency>

    <!-- File uploads -->
    <dependency>
      <groupId>com.sun.jersey.contribs</groupId>
      <artifactId>jersey-multipart</artifactId>
      <version>1.3</version>
    </dependency>

    <!-- Test dependencies -->
    <dependency>
      <groupId>cuke4duke</groupId>
      <artifactId>cuke4duke</artifactId>
    </dependency>
    <dependency>
      <groupId>org.picocontainer</groupId>
      <artifactId>picocontainer</artifactId>
    </dependency>

    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-firefox-driver</artifactId>
      <version>${webdriver.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-htmlunit-driver</artifactId>
      <version>${webdriver.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-chrome-driver</artifactId>
      <version>${webdriver.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-ie-driver</artifactId>
      <version>${webdriver.version}</version>
      <scope>test</scope>
    </dependency>


    <dependency>
      <!-- Provides Autoprocessor. This dependency makes the plugin loader Felix-specific rather than 
        generic. Consider refactoring out this dependency, or don't worry about it and always uses Felix. -->
      <groupId>org.apache.felix</groupId>
      <artifactId>org.apache.felix.main</artifactId>
      <version>3.0.2</version>
    </dependency>

    <dependency>
      <groupId>org.osgi</groupId>
      <artifactId>osgi_R4_core</artifactId>
    </dependency>

    <dependency>
      <groupId>org.osgi</groupId>
      <artifactId>osgi_R4_compendium</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.felix</groupId>
      <artifactId>org.apache.felix.fileinstall</artifactId>
      <version>${felix-fileinstall.version}</version>
    </dependency>

    <dependency>
      <groupId>org.ops4j.pax.swissbox</groupId>
      <artifactId>pax-swissbox-tinybundles</artifactId>
      <version>1.3.0</version>
      <scope>test</scope>
    </dependency>


    <dependency>
      <groupId>org.ops4j.pax.url</groupId>
      <artifactId>pax-url-mvn</artifactId>
      <version>1.1.3</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.neo4j</groupId>
      <artifactId>neo4j-shell</artifactId>
      <version>1.5-SNAPSHOT</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-all</artifactId>
    </dependency>

  </dependencies>

  <build>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
      </resource>
      <resource>
        <directory>${project.build.directory}/generated-sources</directory>
      </resource>
      <resource>
        <directory>${basedir}</directory>
        <targetPath>META-INF</targetPath>
        <includes>
          <include>NOTICE.txt</include>
          <include>LICENSE.txt</include>
          <include>CHANGES.txt</include>
          <include>LICENSES.txt</include>
        </includes>
      </resource>
    </resources>


    <plugins>

      <!-- Development execution -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <mainClass>${neo4j-server.mainClass}</mainClass>
          <systemProperties>
            <systemProperty>
              <key>org.neo4j.server.properties</key>
              <value>${basedir}/neo4j-home/conf/neo4j-server.properties</value>
            </systemProperty>
          </systemProperties>
        </configuration>
      </plugin>

      <plugin>
        <artifactId>maven-site-plugin</artifactId>
        <executions>
          <execution>
            <id>create-site</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>site</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <executions>
          <execution>
            <id>static-web</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <attach>true</attach>
              <descriptors>
                <descriptor>src/main/assemblies/static-web.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>
          <execution>
            <id>site</id>
            <phase>package</phase>
            <configuration>
              <attach>true</attach>
              <appendAssemblyId>true</appendAssemblyId>
              <descriptors>
                <descriptor>src/main/assemblies/site-assembly.xml</descriptor>
              </descriptors>
            </configuration>
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>com.mycila.maven-license-plugin</groupId>
        <artifactId>maven-license-plugin</artifactId>
        <executions>
          <execution>
            <id>inject-license-in-js-files</id>
            <!-- Done in validate phase b/c the license header check is done in the intialize phase, 
              validate is the only one before it. -->
            <phase>validate</phase>
            <configuration>
              <basedir>src/main/resources/webadmin-html/</basedir>
              <includes>
                <!-- temporary configuration fix -->
                <include>**/webadmin-min.js</include>
              </includes>
              <excludes>
                <exclude>lib/*</exclude>
              </excludes>
            </configuration>
            <goals>
              <goal>format</goal>
            </goals>
          </execution>
        </executions>
        <!-- temporary configuration fix -->
        <configuration>
          <strictCheck>true</strictCheck>
          <header>${license-text.header}</header>
          <includes>
            <include>src/**/*.java</include>
            <include>src/**/*.js</include>
            <include>src/**/*.scala</include>
            <include>src/**/*.xml</include>
          </includes>
          <excludes>
            <exclude>**/lib/*.js</exclude>
            <exclude>**/lib/**/*.js</exclude>
            <exclude>**/javascript/vend/**</exclude>
            <exclude>**/webadmin-html/**</exclude>
          </excludes>
          <mapping>
            <scala>JAVADOC_STYLE</scala>
          </mapping>
        </configuration>
      </plugin>

      <plugin>
        <artifactId>maven-jar-plugin</artifactId>
        <executions>
          <execution>
            <id>default-jar</id>
            <goals>
              <goal>jar</goal>
            </goals>
            <configuration>
              <archive>
                <manifest>
                  <mainClass>${neo4j-server.mainClass}</mainClass>
                </manifest>
              </archive>
              <excludes>
                <exclude>webadmin-html/**</exclude>
                <exclude>lib/**</exclude>
              </excludes>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>appassembler-maven-plugin</artifactId>
        <configuration>
          <repositoryLayout>flat</repositoryLayout>
          <includeConfigurationDirectoryInClasspath>true</includeConfigurationDirectoryInClasspath>
          <configurationDirectory>etc</configurationDirectory>
          <target>${project.build.directory}/dist</target>
          <daemons>
            <daemon>
              <id>neo-server</id>
              <mainClass>${neo4j-server.mainClass}</mainClass>
              <commandLineArguments>
                <commandLineArgument>start</commandLineArgument>
              </commandLineArguments>
              <platforms>
                <platform>jsw</platform>
              </platforms>
            </daemon>
          </daemons>
        </configuration>
        <executions>
          <execution>
            <id>generate-jsw-scripts</id>
            <phase>package</phase>
            <goals>
              <goal>generate-daemons</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <systemPropertyVariables>
            <java.io.tmpdir>${project.build.directory}</java.io.tmpdir>
          </systemPropertyVariables>
          <argLine>-Xmx1024m</argLine>
        </configuration>
      </plugin>

      <!-- experiment with copying artifacts into expected startup directories... <plugin> <groupId>org.apache.maven.plugins</groupId> 
        <artifactId>maven-dependency-plugin</artifactId> <executions> <execution> <id>copy-dependencies</id> 
        <phase>package</phase> <goals> <goal>copy-dependencies</goal> </goals> <configuration> <outputDirectory>${project.build.directory}/lib</outputDirectory> 
        <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>true</overWriteSnapshots> <includeScope>runtime</includeScope> 
        <excludeScope>test</excludeScope> </configuration> </execution> <execution> <id>copy-extensions</id> 
        <phase>package</phase> <goals> <goal>copy</goal> </goals> <configuration> <artifactItems> <artifactItem> 
        <groupId>org.neo4j.ext</groupId> <artifactId>hello-ext</artifactId> <version>0.1-SNAPSHOT</version> <classifier>next</classifier> 
        </artifactItem> </artifactItems> <outputDirectory>${project.build.directory}/ext</outputDirectory> </configuration> 
        </execution> <execution> <id>copy-installed</id> <phase>install</phase> <goals> <goal>copy</goal> </goals> 
        <configuration> <artifactItems> <artifactItem> <groupId>${project.groupId}</groupId> <artifactId>${project.artifactId}</artifactId> 
        <version>${project.version}</version> <type>${project.packaging}</type> </artifactItem> </artifactItems> 
        <outputDirectory>${project.build.directory}/lib</outputDirectory> </configuration> </execution> </executions> 
        </plugin> -->
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>functional-tests</id>
      <activation>
        <activeByDefault>true</activeByDefault>
        <property>
          <name>tests</name>
          <value>functional</value>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>add-test-source</id>
                <phase>generate-test-sources</phase>
                <goals>
                  <goal>add-test-source</goal>
                </goals>
                <configuration>
                  <sources>
                    <source>src/functionaltest/java</source>
                  </sources>
                </configuration>
              </execution>
              <execution>
                <id>add-test-resource</id>
                <phase>generate-test-resources</phase>
                <goals>
                  <goal>add-test-resource</goal>
                </goals>
                <configuration>
                  <resources>
                    <resource>
                      <directory>src/functionaltest/resources</directory>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <skip>false</skip>
              <argLine>-Xmx1024m</argLine>
              <forkMode>perTest</forkMode>
            </configuration>
          </plugin>
          <plugin>
            <artifactId>maven-jar-plugin</artifactId>
            <executions>
              <execution>
                <id>attach-docs</id>
                <phase>none</phase>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-assembly-plugin</artifactId>
            <executions>
              <execution>
                <id>docs</id>
                <phase>package</phase>
                <configuration>
                  <attach>true</attach>
                  <appendAssemblyId>true</appendAssemblyId>
                  <descriptors>
                    <descriptor>src/main/assemblies/docs-assembly.xml</descriptor>
                  </descriptors>
                </configuration>
                <goals>
                  <goal>single</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>web-tests</id>
      <activation>
        <property>
          <name>tests</name>
          <value>web</value>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>add-test-source</id>
                <phase>generate-test-sources</phase>
                <goals>
                  <goal>add-test-source</goal>
                </goals>
                <configuration>
                  <sources>
                    <source>src/webtest/java</source>
                    <!-- Required b/c we use utility classes from here -->
                    <source>src/functionaltest/java</source>
                  </sources>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>cuke4duke</groupId>
            <artifactId>cuke4duke-maven-plugin</artifactId>
            <configuration>
              <jvmArgs>
                <jvmArg>-Xmx384m</jvmArg>
                <jvmArg>-Dlog4j.configuration=file:///${project.basedir}/target/test-classes/log4j.properties</jvmArg>
                <jvmArg>-Dwebdriver.impl=${webdriver.impl.class}</jvmArg>
                <jvmArg>-DtestWithExternalServer=${testWithExternalServer}</jvmArg>
                <jvmArg>-DtestWithDevHtmlFile=${testWithDevHtmlFile}</jvmArg>
              </jvmArgs>
              <cucumberArgs>
                <cucumberArg>--verbose</cucumberArg>
                <cucumberArg>--strict</cucumberArg>
                <cucumberArg>--color</cucumberArg>
                <cucumberArg>--require</cucumberArg>
                <cucumberArg>${basedir}/target/test-classes</cucumberArg>
                <cucumberArg>${cukeArgs}</cucumberArg>
              </cucumberArgs>
              <gems>
                <gem>install cuke4duke --version ${cuke4duke.version}</gem>
              </gems>
            </configuration>
            <executions>
              <execution>
                <id>run-features</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>cucumber</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <skip>true</skip>
            </configuration>
          </plugin>

        </plugins>
      </build>
    </profile>

    <profile>
      <!-- An execution that adds src/main/resources to the classpath. Allows changing static files and 
        seeing results without restarting server. Done with ant b/c of problems adding local directory to classpath 
        when using exec. -->
      <id>webdev-exec</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>

            <configuration>
              <target>
                <property name="classpath" refid="maven.runtime.classpath" />
                <exec executable="java">
                  <arg line="-Dorg.neo4j.server.properties=${basedir}/neo4j-home/conf/neo4j-server.properties" />
                  <arg line="-classpath" />
                  <arg line="${basedir}/src/main/resources:${classpath}" />
                  <arg line="${neo4j-server.mainClass}" />
                </exec>
              </target>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <!-- Disconnected from the "normal" build pipeline, because the
           artifact that this produces (webadmin.min.js) is checked into
           the source tree (and thus there is no reason to normally rebuild it).

           I know, that's really awful, but the alternative is forcing 
           everyone to run the webadmin build all the time, and its *really* slow.

           The plan is to move webadmin into it's own project, where the
           build can be sane without killing the build time for the server project.
       -->
      <id>webadmin-build</id>
      <build>
        <plugins>
          <plugin>
            <groupId>com.voltvoodoo</groupId>
            <artifactId>brew</artifactId>
            <version>0.2.2</version>
            <executions>
              <execution>
              	<id>build-webadmin</id>
                <goals>
                  <goal>compile</goal>
                  <goal>optimize</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <modules>
              	<module>
                  <name>webadmin</name>
                  <exclude>
                  	<exclude>lib/arbor.js</exclude>
                  </exclude>
              	</module>
              </modules>
              <coffeeOutputDir>${basedir}/src/main/resources/webadmin-html/js</coffeeOutputDir>
              <hamlOutputDir>${basedir}/src/main/resources/webadmin-html/js</hamlOutputDir>
              <optimizeSourceDir>${basedir}/src/main/resources/webadmin-html/js</optimizeSourceDir>
              <optimizeOutputDir>${basedir}/src/main/resources/webadmin-html/js</optimizeOutputDir>
            </configuration>
          </plugin>
        </plugins>
      </build>
   </profile>
   
   <profile>
      <id>neodev</id>
      <!-- Expands the number of things skipped by the neodev
           profile defined in parent-central pom. 

           This is meant to be used by maven exec, it does not
           guarantee producing working artifacts. -->
      <build>
        <plugins>
          <plugin>
            <groupId>com.mycila.maven-license-plugin</groupId>
            <artifactId>maven-license-plugin</artifactId>
            <executions>
              <execution><id>inject-license-in-js-files</id><phase>none</phase></execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>appassembler-maven-plugin</artifactId>
            <executions>
              <execution><id>generate-jsw-scripts</id><phase>none</phase></execution>
            </executions>
          </plugin>
          <plugin>
            <artifactId>maven-assembly-plugin</artifactId>
            <executions>
              <execution><id>static-web</id><phase>none</phase></execution>
              <execution><id>site</id><phase>none</phase></execution>
            </executions>
          </plugin>
          <plugin>
	        <artifactId>maven-site-plugin</artifactId>
	        <executions>
	          <execution><id>create-site</id><phase>none</phase></execution>
	        </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- Firefox is default implementation, set in properties at the top of this file. -->
    <profile>
      <id>htmlunit</id>
      <properties>
        <webdriver.impl.class>org.openqa.selenium.htmlunit.HtmlUnitDriver</webdriver.impl.class>
      </properties>
    </profile>
    <profile>
      <id>chrome</id>
      <properties>
        <webdriver.impl.class>org.openqa.selenium.chrome.ChromeDriver</webdriver.impl.class>
      </properties>
    </profile>
    <profile>
      <id>ie</id>
      <properties>
        <webdriver.impl.class>org.openqa.selenium.ie.InternetExplorerDriver</webdriver.impl.class>
      </properties>
    </profile>

    <profile>
      <id>initial-build</id>
      <repositories>
        <repository>
          <id>neo4j-dev</id>
          <name>Neo4j Developer Repository</name>
          <url>https://repo.neo4j.org/content/groups/dev/</url>
        </repository>
      </repositories>
    </profile>
  </profiles>


  <reporting>
    <plugins>
      <plugin>
        <artifactId>maven-javadoc-plugin</artifactId>
        <configuration>
          <groups>
            <group>
              <title>Server</title>
              <packages>org.neo4j.server:org.neo4j.server.*</packages>
            </group>
            <group>
              <title>Server REST Interface</title>
              <packages>org.neo4j.server.rest:org.neo4j.server.rest.*</packages>
            </group>
            <group>
              <title>Server Admin Interface</title>
              <packages>org.neo4j.server.webadmin:org.neo4j.server.webadmin.*</packages>
            </group>
          </groups>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>clirr-maven-plugin</artifactId>
        <reportSets>
          <reportSet />
        </reportSets>
      </plugin>
    </plugins>
  </reporting>

  <repositories>
    <repository>
      <id>java.net</id>
      <url>http://download.java.net/maven/2/</url>
    </repository>
    <repository>
      <id>tinkerpop-repository</id>
      <name>TinkerPop Maven2 Repository</name>
      <url>http://tinkerpop.com/maven2</url>
      <snapshots>
        <enabled>true</enabled>
        <updatePolicy>daily</updatePolicy>
      </snapshots>
    </repository>
    <repository>
      <id>selenium-repository</id>
      <url>http://selenium.googlecode.com/svn/repository</url>
    </repository>
    <repository>
      <id>neo4j-release-repository</id>
      <name>Neo4j Maven 2 release repository</name>
      <url>http://m2.neo4j.org/releases</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </repository>
    <repository>
      <id>neo4j-snapshot-repository</id>
      <name>Neo4j Maven 2 snapshot repository</name>
      <url>http://m2.neo4j.org/snapshots</url>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
      <releases>
        <enabled>false</enabled>
      </releases>
    </repository>
    <repository>
      <id>cukes</id>
      <url>http://cukes.info/maven</url>
    </repository>
  </repositories>

  <pluginRepositories>
    <pluginRepository>
      <id>jsdoctk2</id>
      <url>http://jsdoctk-plugin.googlecode.com/svn/repo</url>
    </pluginRepository>
    <pluginRepository>
      <id>cukes</id>
      <url>http://cukes.info/maven</url>
    </pluginRepository>
  </pluginRepositories>

  <distributionManagement>
    <site>
      <id>neo4j-site</id>
      <url>scpexe://components.neo4j.org/home/neo/components/${project.artifactId}/${project.version}</url>
    </site>
  </distributionManagement>

</project>
